[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MVPA by Cross-Validated (Cross-) MANOVA",
    "section": "",
    "text": "This project is under development and not yet usable.\n\nThis software is copyrighted © 2023 by Carsten Allefeld and released under the terms of the GNU General Public License, version 3 or later. With contributions by Remi Gau, Polina Iamshchinina, and Thomas Christophel.\nIt has been developed with Matlab R2022b (v9.13) and SPM12 r7771, but should work with later and possibly slightly earlier versions.\nThe software does not depend on other toolboxes, except cvCrossManovaRegion and cvCrossManovaSearchlight which depend on SPM being installed."
  },
  {
    "objectID": "reference.html",
    "href": "reference.html",
    "title": "Reference documentation",
    "section": "",
    "text": "data type representing an analysis\n\n\n\n\n\nCA\n‘training’ contrast, regressors × subcontrasts\n\n\nCB\n‘validation’ contrast, regressors × subcontrasts\n\n\nsessionsA\n‘training’ sessions, folds × sessions logical\n\n\nsessionsB\n‘validation’ sessions, folds × sessions logical\n\n\nL\nnumber of folds\n\n\nm\nnumber of sessions\n\n\nperms\nsign permutations, permutations × sessions\n\n\n\n\n\n\ncreate Analysis object for leave-one-session-out cross-validation\nanalysis = Analysis.leaveOneSessionOut(m, C)\nanalysis = Analysis.leaveOneSessionOut(m, CA, CB)\nThis is a convenience method which calls the constructor with sessionsB = logical(eye(m)) and sessionsA = not(sessionsB).\nIf only one contrast C is specified, it is used for both ‘training’ (CA) and ‘validation’ (CB).\n\n\n\ncreate Analysis object\nanalysis = Analysis(CA, CB, sessionsA, sessionsB)\n\n\n\nadd sign permutations of per-session parameter estimates\nanalysis.addPermutations(maxPerms = 1000)\nThis method adds information to analysis that sign-permutations should be applied, so that different values of D for the different permutations are computed.\n\n\n\n\n\n\nWarning\n\n\n\nSign permutations are used to test a per-subject null hypothesis of no effect in standard MANOVA analyses. It does not make sense to apply them to Cross-MANOVAs.\n\n\nFor m sessions there are formally 2m per-session sign permutations, but not all of them lead to different permutation values. The number of unique permutations depends on the ‘training’ and ‘validation’ sessions used in different folds (sessionsA, sessionsB). This method determines which permutations lead to different outcomes and makes sure only those unique permutations are performed.\nIf the number of unique permutations exceeds maxPerms, a randomly chosen subset of maxPerms is chosen (including the neutral permutation, which is always permutation 1).\n\n\n\ntextually display information about analysis\nanalysis.disp()\nThis method overrides Matlab’s disp, so you can also use disp(analysis) or simply analysis without semicolon to get the same output.\n\n\n\ngraphically display information about analysis\nfig = analysis.show()\nThe method creates a figure and returns the handle."
  },
  {
    "objectID": "reference.html#class-analysis",
    "href": "reference.html#class-analysis",
    "title": "Reference documentation",
    "section": "",
    "text": "data type representing an analysis\n\n\n\n\n\nCA\n‘training’ contrast, regressors × subcontrasts\n\n\nCB\n‘validation’ contrast, regressors × subcontrasts\n\n\nsessionsA\n‘training’ sessions, folds × sessions logical\n\n\nsessionsB\n‘validation’ sessions, folds × sessions logical\n\n\nL\nnumber of folds\n\n\nm\nnumber of sessions\n\n\nperms\nsign permutations, permutations × sessions\n\n\n\n\n\n\ncreate Analysis object for leave-one-session-out cross-validation\nanalysis = Analysis.leaveOneSessionOut(m, C)\nanalysis = Analysis.leaveOneSessionOut(m, CA, CB)\nThis is a convenience method which calls the constructor with sessionsB = logical(eye(m)) and sessionsA = not(sessionsB).\nIf only one contrast C is specified, it is used for both ‘training’ (CA) and ‘validation’ (CB).\n\n\n\ncreate Analysis object\nanalysis = Analysis(CA, CB, sessionsA, sessionsB)\n\n\n\nadd sign permutations of per-session parameter estimates\nanalysis.addPermutations(maxPerms = 1000)\nThis method adds information to analysis that sign-permutations should be applied, so that different values of D for the different permutations are computed.\n\n\n\n\n\n\nWarning\n\n\n\nSign permutations are used to test a per-subject null hypothesis of no effect in standard MANOVA analyses. It does not make sense to apply them to Cross-MANOVAs.\n\n\nFor m sessions there are formally 2m per-session sign permutations, but not all of them lead to different permutation values. The number of unique permutations depends on the ‘training’ and ‘validation’ sessions used in different folds (sessionsA, sessionsB). This method determines which permutations lead to different outcomes and makes sure only those unique permutations are performed.\nIf the number of unique permutations exceeds maxPerms, a randomly chosen subset of maxPerms is chosen (including the neutral permutation, which is always permutation 1).\n\n\n\ntextually display information about analysis\nanalysis.disp()\nThis method overrides Matlab’s disp, so you can also use disp(analysis) or simply analysis without semicolon to get the same output.\n\n\n\ngraphically display information about analysis\nfig = analysis.show()\nThe method creates a figure and returns the handle."
  },
  {
    "objectID": "reference.html#class-cvcrossmanova",
    "href": "reference.html#class-cvcrossmanova",
    "title": "Reference documentation",
    "section": "class CvCrossManova",
    "text": "class CvCrossManova\ndata type representing data and analyses\n\nproperties\n\n\n\nYs\ncell array of per-session design matrices, observations × variables\n\n\nXs\ncell array of per-session data matrices, observations × regressors\n\n\nanalyses\ncell array of Analysis objects\n\n\nlambda\nstrength of regularization (0–1) towards Euclidean metric\n\n\nfs\narray of per-session residual degrees of freedom\n\n\nm\nnumber of sessions\n\n\nns\narray of per-session numbers of observations (rows)\n\n\nnResults\narray of per-analysis returned numbers of results\n\n\n\n\n\nconstructor CvCrossManova\ncreate CvCrossManova object\nccm = CvCrossManova(Ys, Xs, analyses, lambda = 1e-8, fs = ...)\nA CvCrossManova object stores data matrices, design matrices, analysis definitions, and further parameters. Upon creation, it also estimates GLM parameters and errors. Actual analyses are then performed on subsets of variables by calling the method runAnalyses.\nThe parameter λ (from 0 to 1) controls the amount of shrinkage regularization applied to the estimate of the error covariance matrix. A small value can be used to improve the numerical and statistical stability of the estimate; the default is 10−8. A value of 1 can be used to disregard the covariance structure, because it replaces the estimated error covariance matrix by a diagonal matrix where every diagonal element is the average variance across variables. This can be useful for Cross-MANOVA if it is intended to quantify orthogonality w.r.t the original data space (Euclidean metric) instead of the whitened space.\nIf the per-session residual degrees of freedom fs are not specified, they are calculated under the assumption that the data observations are uncorrelated, as ns(k) - rank(Xs{k}). If the observations have been only approximately decorrelated or have been filtered, correct values should be explicitly specified.\n\n\nmethod runAnalyses\nrun the defined analyses on (a subset of) the variables\nDs = ccm.runAnalyses(vi)\nDs = ccm.runAnalyses()\nvi specifies the variables to be included in the analysis, as column indices into the data matrices Ys. If omitted, all variables are included.\nDs is a cell array of analysis results where each element results from the corresponding element in analyses. Whether this result is an estimate of pattern distinctness D or pattern stability D× depends on the contrasts and regressors involved in them.\nFor an analysis which does not include permutations, the cell array element is a scalar; otherwise it is an array of permutation values, where the first element is the actual estimate (corresponding to the neutral permutation).\nTo determine how many values will be included in each of the elements of Ds before actually running an analysis, e.g. for preallocation, use the property nResults. It is a vector where each element gives the number of values returned for the corresponding analysis (i.e. the number of permutations).\n\n\nmethod dispAnalyses\ntextually display information about all analyses\nccm.dispAnalyses()\n\n\nmethod showAnalyses\ngraphically display information about all analyses\nccm.showAnalyses()"
  },
  {
    "objectID": "reference.html#function-cvcrossmanovasearchlight",
    "href": "reference.html#function-cvcrossmanovasearchlight",
    "title": "Reference documentation",
    "section": "function cvCrossManovaSearchlight",
    "text": "function cvCrossManovaSearchlight\ncross-validated (cross-) MANOVA on searchlight\ncvCrossManovaSearchlight(dirName, slRadius, Cs, permute = false, lambda = 0)\n\n\n\ndirName\ndirectory where the SPM.mat file referring to an estimated model is located\n\n\nslRadius\nradius of the searchlight sphere in voxels\n\n\nanalyses\ncell array of analysis specifications\n\n\npermute\nwhether to compute permutation values\n\n\nlambda\nregularization parameter (0–1)\n\n\n\nOutput files are written to the same directory:\n\n\n\nspmD_C####_P####.nii\nimages of the pattern discriminability D, contrast and permutation are identified by numbers\n\n\nspmDs_C####_P####.nii\nimages of standardized pattern discriminability Ds\n\n\nVPSL.nii\nimage of the number of voxels for each searchlight\n\n\ncmsParameters.mat\nrecord of the analysis parameters"
  },
  {
    "objectID": "reference.html#function-cvcrossmanovaregion",
    "href": "reference.html#function-cvcrossmanovaregion",
    "title": "Reference documentation",
    "section": "function cvCrossManovaRegion",
    "text": "function cvCrossManovaRegion\ncross-validated MANOVA on region\n[D, p] = cvCrossManovaRegion(dirName, regions, analyses, permute = false, lambda = 0)\n\n\n\ndirName\ndirectory where the SPM.mat file referring to an estimated model is located\n\n\nregions\nregion mask(s), (cell array of) logical 3D volume(s) or filename(s)\n\n\nanalyses\ncell array of analysis specifications\n\n\nlambda\nregularization parameter (0–1)\n\n\npermute\nwhether to compute permutation values\n\n\nD\npattern distinctness, contrasts × permutations × regions\n\n\np\nnumber of voxels in the region(s)"
  },
  {
    "objectID": "reference.html#function-contrastestimable",
    "href": "reference.html#function-contrastestimable",
    "title": "Reference documentation",
    "section": "function contrastEstimable",
    "text": "function contrastEstimable\ncheck whether a contrast is estimable w.r.t. a design matrix\n[estimable, error] = contrastEstimable(C, X)\ncontrastEstimable(C, X)\n\n\n\nC\ncontrast matrix, regressors × subcontrasts\n\n\nX\ndesign matrix, observations × regressors\n\n\nestimable\nwhether the contrast is estimable, logical\n\n\nerror\ndegree of inestimability\n\n\n\nEstimability is determined by checking whether the contrast is contained in the row space of the design matrix (see Friston et al. 2007, p. 106). error is the underlying numerical measure of inestimability, which should be 0 for an estimable contrast, but may just be close to 0 due to numerical error. The criterion used is estimable = (error &lt; max(size(C)) * eps).\nThe second syntax reports the result instead of returning it."
  }
]